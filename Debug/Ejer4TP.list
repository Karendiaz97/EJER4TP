
Ejer4TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003064  08003064  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003064  08003064  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003064  08003064  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000054  080030c0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080030c0  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c803  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab6  00000000  00000000  0002c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  0002ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017441  00000000  00000000  0002fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd57  00000000  00000000  00046ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008964d  00000000  00000000  00053c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd265  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  000dd2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08003020 	.word	0x08003020

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08003020 	.word	0x08003020

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fba5 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8a3 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f979 	bl	8000460 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f951 	bl	8000414 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f925 	bl	80003c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000176:	f000 f8d7 	bl	8000328 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
HAL_UART_Receive_IT(&huart1, &data, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	493f      	ldr	r1, [pc, #252]	; (800027c <main+0x120>)
 800017e:	4840      	ldr	r0, [pc, #256]	; (8000280 <main+0x124>)
 8000180:	f002 f97d 	bl	800247e <HAL_UART_Receive_IT>

  while (1)
  {

	  uint8_t currentButtonState1 = HAL_GPIO_ReadPin(GPIOA, Tec1_Pin);
 8000184:	2102      	movs	r1, #2
 8000186:	483f      	ldr	r0, [pc, #252]	; (8000284 <main+0x128>)
 8000188:	f001 f89a 	bl	80012c0 <HAL_GPIO_ReadPin>
 800018c:	4603      	mov	r3, r0
 800018e:	71fb      	strb	r3, [r7, #7]
	  // Si el estado del botón ha cambiado
	   if (currentButtonState1 != lastButtonState1)
 8000190:	4b3d      	ldr	r3, [pc, #244]	; (8000288 <main+0x12c>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	79fa      	ldrb	r2, [r7, #7]
 8000196:	429a      	cmp	r2, r3
 8000198:	d02b      	beq.n	80001f2 <main+0x96>
	   {
	   counter1++;
 800019a:	4b3c      	ldr	r3, [pc, #240]	; (800028c <main+0x130>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	3301      	adds	r3, #1
 80001a0:	b2da      	uxtb	r2, r3
 80001a2:	4b3a      	ldr	r3, [pc, #232]	; (800028c <main+0x130>)
 80001a4:	701a      	strb	r2, [r3, #0]
	   if (counter1 == DEBOUNCE_SAMPLES)
 80001a6:	4b39      	ldr	r3, [pc, #228]	; (800028c <main+0x130>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d124      	bne.n	80001f8 <main+0x9c>
	   {
	   // Actualiza el estado del botón si el cambio es consistente
	   buttonState1 = currentButtonState1;
 80001ae:	4a38      	ldr	r2, [pc, #224]	; (8000290 <main+0x134>)
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	7013      	strb	r3, [r2, #0]
	   counter1 = 0;
 80001b4:	4b35      	ldr	r3, [pc, #212]	; (800028c <main+0x130>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
	   // Aquí puedes agregar el código que debe ejecutarse al detectar una pulsación
	   if (buttonState1 == 1)
 80001ba:	4b35      	ldr	r3, [pc, #212]	; (8000290 <main+0x134>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d10b      	bne.n	80001da <main+0x7e>
	   {   // El botón ha sido presionado
		   // Agregar la lógica deseada aquí
          HAL_UART_Transmit(&huart1, Tec1p, strlen((char*)Tec1p),HAL_MAX_DELAY);
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <main+0x138>)
 80001c4:	f7ff ffc2 	bl	800014c <strlen>
 80001c8:	4603      	mov	r3, r0
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	f04f 33ff 	mov.w	r3, #4294967295
 80001d0:	4930      	ldr	r1, [pc, #192]	; (8000294 <main+0x138>)
 80001d2:	482b      	ldr	r0, [pc, #172]	; (8000280 <main+0x124>)
 80001d4:	f002 f8d0 	bl	8002378 <HAL_UART_Transmit>
 80001d8:	e00e      	b.n	80001f8 <main+0x9c>
	   }
	   else {// El botón ha sido liberado
 	   	     // Agregar la lógica deseada aquí
	 	   	 HAL_UART_Transmit(&huart1, Tec1l, strlen((char*)Tec1l),HAL_MAX_DELAY);
 80001da:	482f      	ldr	r0, [pc, #188]	; (8000298 <main+0x13c>)
 80001dc:	f7ff ffb6 	bl	800014c <strlen>
 80001e0:	4603      	mov	r3, r0
 80001e2:	b29a      	uxth	r2, r3
 80001e4:	f04f 33ff 	mov.w	r3, #4294967295
 80001e8:	492b      	ldr	r1, [pc, #172]	; (8000298 <main+0x13c>)
 80001ea:	4825      	ldr	r0, [pc, #148]	; (8000280 <main+0x124>)
 80001ec:	f002 f8c4 	bl	8002378 <HAL_UART_Transmit>
 80001f0:	e002      	b.n	80001f8 <main+0x9c>
	 	   	}
	   }
	   }
	   else {counter1 = 0; // Reiniciar el contador si el estado no cambia
 80001f2:	4b26      	ldr	r3, [pc, #152]	; (800028c <main+0x130>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	701a      	strb	r2, [r3, #0]
	   }
	   lastButtonState1 = currentButtonState1;
 80001f8:	4a23      	ldr	r2, [pc, #140]	; (8000288 <main+0x12c>)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	7013      	strb	r3, [r2, #0]

	       uint8_t currentButtonState2 = HAL_GPIO_ReadPin(GPIOA, Tec2_Pin);
 80001fe:	2104      	movs	r1, #4
 8000200:	4820      	ldr	r0, [pc, #128]	; (8000284 <main+0x128>)
 8000202:	f001 f85d 	bl	80012c0 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	71bb      	strb	r3, [r7, #6]
	   	   // Si el estado del botón ha cambiado
	   	   if (currentButtonState2 != lastButtonState2)
 800020a:	4b24      	ldr	r3, [pc, #144]	; (800029c <main+0x140>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	79ba      	ldrb	r2, [r7, #6]
 8000210:	429a      	cmp	r2, r3
 8000212:	d02b      	beq.n	800026c <main+0x110>
	   	   {
	   	   counter2++;
 8000214:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <main+0x144>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	b2da      	uxtb	r2, r3
 800021c:	4b20      	ldr	r3, [pc, #128]	; (80002a0 <main+0x144>)
 800021e:	701a      	strb	r2, [r3, #0]
	   	   if (counter2 == DEBOUNCE_SAMPLES)
 8000220:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <main+0x144>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d124      	bne.n	8000272 <main+0x116>
	   	   {
	   	   // Actualiza el estado del botón si el cambio es consistente
	   	   buttonState2 = currentButtonState2;
 8000228:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <main+0x148>)
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	7013      	strb	r3, [r2, #0]
	   	   counter2 = 0;
 800022e:	4b1c      	ldr	r3, [pc, #112]	; (80002a0 <main+0x144>)
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
	   	   // Aquí puedes agregar el código que debe ejecutarse al detectar una pulsación
	   	   if (buttonState2 == 1)
 8000234:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <main+0x148>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d10b      	bne.n	8000254 <main+0xf8>
	   	   {   // El botón ha sido presionado
		   	   // Agregar la lógica deseada aquí
	          HAL_UART_Transmit(&huart1, Tec2p, strlen((char*)Tec2p),HAL_MAX_DELAY);
 800023c:	481a      	ldr	r0, [pc, #104]	; (80002a8 <main+0x14c>)
 800023e:	f7ff ff85 	bl	800014c <strlen>
 8000242:	4603      	mov	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	f04f 33ff 	mov.w	r3, #4294967295
 800024a:	4917      	ldr	r1, [pc, #92]	; (80002a8 <main+0x14c>)
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <main+0x124>)
 800024e:	f002 f893 	bl	8002378 <HAL_UART_Transmit>
 8000252:	e00e      	b.n	8000272 <main+0x116>
	   	   }
	   	   else  {// El botón ha sido liberado
	   	   		  // Agregar la lógica deseada aquí
	   	   		  HAL_UART_Transmit(&huart1, Tec2l, strlen((char*)Tec2l),HAL_MAX_DELAY);
 8000254:	4815      	ldr	r0, [pc, #84]	; (80002ac <main+0x150>)
 8000256:	f7ff ff79 	bl	800014c <strlen>
 800025a:	4603      	mov	r3, r0
 800025c:	b29a      	uxth	r2, r3
 800025e:	f04f 33ff 	mov.w	r3, #4294967295
 8000262:	4912      	ldr	r1, [pc, #72]	; (80002ac <main+0x150>)
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <main+0x124>)
 8000266:	f002 f887 	bl	8002378 <HAL_UART_Transmit>
 800026a:	e002      	b.n	8000272 <main+0x116>
	   	   		 }
	   	   }
	   	   }
	   	   else {counter2 = 0; // Reiniciar el contador si el estado no cambia
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <main+0x144>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
	   	   }
	   	   lastButtonState2 = currentButtonState2;
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <main+0x140>)
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	7013      	strb	r3, [r2, #0]
  {
 8000278:	e784      	b.n	8000184 <main+0x28>
 800027a:	bf00      	nop
 800027c:	2000018e 	.word	0x2000018e
 8000280:	200000b8 	.word	0x200000b8
 8000284:	40010800 	.word	0x40010800
 8000288:	2000018a 	.word	0x2000018a
 800028c:	20000189 	.word	0x20000189
 8000290:	20000188 	.word	0x20000188
 8000294:	20000000 	.word	0x20000000
 8000298:	20000014 	.word	0x20000014
 800029c:	2000018d 	.word	0x2000018d
 80002a0:	2000018c 	.word	0x2000018c
 80002a4:	2000018b 	.word	0x2000018b
 80002a8:	20000024 	.word	0x20000024
 80002ac:	20000038 	.word	0x20000038

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fea6 	bl	8003010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	2310      	movs	r3, #16
 80002dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002de:	2300      	movs	r3, #0
 80002e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f832 	bl	8001350 <HAL_RCC_OscConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002f2:	f000 f95b 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	230f      	movs	r3, #15
 80002f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f001 faa0 	bl	8001854 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031a:	f000 f947 	bl	80005ac <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_TIM2_Init+0x94>)
 8000346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_TIM2_Init+0x94>)
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_TIM2_Init+0x94>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_TIM2_Init+0x94>)
 800035a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800035e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_TIM2_Init+0x94>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_TIM2_Init+0x94>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <MX_TIM2_Init+0x94>)
 800036e:	f001 fbff 	bl	8001b70 <HAL_TIM_Base_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000378:	f000 f918 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	4619      	mov	r1, r3
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <MX_TIM2_Init+0x94>)
 800038a:	f001 fd48 	bl	8001e1e <HAL_TIM_ConfigClockSource>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000394:	f000 f90a 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_TIM2_Init+0x94>)
 80003a6:	f001 ff27 	bl	80021f8 <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003b0:	f000 f8fc 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000070 	.word	0x20000070

080003c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_USART1_UART_Init+0x50>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART1_UART_Init+0x4c>)
 80003f8:	f001 ff6e 	bl	80022d8 <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000402:	f000 f8d3 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200000b8 	.word	0x200000b8
 8000410:	40013800 	.word	0x40013800

08000414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_DMA_Init+0x48>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a0f      	ldr	r2, [pc, #60]	; (800045c <MX_DMA_Init+0x48>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <MX_DMA_Init+0x48>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	200e      	movs	r0, #14
 8000438:	f000 fb73 	bl	8000b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800043c:	200e      	movs	r0, #14
 800043e:	f000 fb8c 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	200f      	movs	r0, #15
 8000448:	f000 fb6b 	bl	8000b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800044c:	200f      	movs	r0, #15
 800044e:	f000 fb84 	bl	8000b5a <HAL_NVIC_EnableIRQ>

}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000474:	4b2d      	ldr	r3, [pc, #180]	; (800052c <MX_GPIO_Init+0xcc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a2c      	ldr	r2, [pc, #176]	; (800052c <MX_GPIO_Init+0xcc>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b2a      	ldr	r3, [pc, #168]	; (800052c <MX_GPIO_Init+0xcc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0310 	and.w	r3, r3, #16
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <MX_GPIO_Init+0xcc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a26      	ldr	r2, [pc, #152]	; (800052c <MX_GPIO_Init+0xcc>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_GPIO_Init+0xcc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_GPIO_Init+0xcc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a20      	ldr	r2, [pc, #128]	; (800052c <MX_GPIO_Init+0xcc>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_GPIO_Init+0xcc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	481b      	ldr	r0, [pc, #108]	; (8000530 <MX_GPIO_Init+0xd0>)
 80004c4:	f000 ff13 	bl	80012ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	21f0      	movs	r1, #240	; 0xf0
 80004cc:	4819      	ldr	r0, [pc, #100]	; (8000534 <MX_GPIO_Init+0xd4>)
 80004ce:	f000 ff0e 	bl	80012ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80004d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4811      	ldr	r0, [pc, #68]	; (8000530 <MX_GPIO_Init+0xd0>)
 80004ec:	f000 fd64 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Tec1_Pin Tec2_Pin */
  GPIO_InitStruct.Pin = Tec1_Pin|Tec2_Pin;
 80004f0:	2306      	movs	r3, #6
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <MX_GPIO_Init+0xd4>)
 8000504:	f000 fd58 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin;
 8000508:	23f0      	movs	r3, #240	; 0xf0
 800050a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2302      	movs	r3, #2
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_GPIO_Init+0xd4>)
 8000520:	f000 fd4a 	bl	8000fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	40011000 	.word	0x40011000
 8000534:	40010800 	.word	0x40010800

08000538 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart1, &data, 1, HAL_MAX_DELAY);
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	2201      	movs	r2, #1
 8000546:	4916      	ldr	r1, [pc, #88]	; (80005a0 <HAL_UART_RxCpltCallback+0x68>)
 8000548:	4816      	ldr	r0, [pc, #88]	; (80005a4 <HAL_UART_RxCpltCallback+0x6c>)
 800054a:	f001 ff15 	bl	8002378 <HAL_UART_Transmit>
    if (data == 97)
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_UART_RxCpltCallback+0x68>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b61      	cmp	r3, #97	; 0x61
 8000554:	d103      	bne.n	800055e <HAL_UART_RxCpltCallback+0x26>
    {HAL_GPIO_TogglePin(GPIOA , Led1_Pin);}
 8000556:	2110      	movs	r1, #16
 8000558:	4813      	ldr	r0, [pc, #76]	; (80005a8 <HAL_UART_RxCpltCallback+0x70>)
 800055a:	f000 fee0 	bl	800131e <HAL_GPIO_TogglePin>

    if (data== 115)
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <HAL_UART_RxCpltCallback+0x68>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b73      	cmp	r3, #115	; 0x73
 8000564:	d103      	bne.n	800056e <HAL_UART_RxCpltCallback+0x36>
    {HAL_GPIO_TogglePin(GPIOA , Led2_Pin);}
 8000566:	2120      	movs	r1, #32
 8000568:	480f      	ldr	r0, [pc, #60]	; (80005a8 <HAL_UART_RxCpltCallback+0x70>)
 800056a:	f000 fed8 	bl	800131e <HAL_GPIO_TogglePin>

    if (data== 100)
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_UART_RxCpltCallback+0x68>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b64      	cmp	r3, #100	; 0x64
 8000574:	d103      	bne.n	800057e <HAL_UART_RxCpltCallback+0x46>
    {HAL_GPIO_TogglePin(GPIOA , Led3_Pin);}
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <HAL_UART_RxCpltCallback+0x70>)
 800057a:	f000 fed0 	bl	800131e <HAL_GPIO_TogglePin>

    if (data== 102)
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_UART_RxCpltCallback+0x68>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b66      	cmp	r3, #102	; 0x66
 8000584:	d103      	bne.n	800058e <HAL_UART_RxCpltCallback+0x56>
    {HAL_GPIO_TogglePin(GPIOA , Led4_Pin);}
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <HAL_UART_RxCpltCallback+0x70>)
 800058a:	f000 fec8 	bl	800131e <HAL_GPIO_TogglePin>

    HAL_UART_Receive_IT(&huart1, &data,1);
 800058e:	2201      	movs	r2, #1
 8000590:	4903      	ldr	r1, [pc, #12]	; (80005a0 <HAL_UART_RxCpltCallback+0x68>)
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <HAL_UART_RxCpltCallback+0x6c>)
 8000594:	f001 ff73 	bl	800247e <HAL_UART_Receive_IT>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000018e 	.word	0x2000018e
 80005a4:	200000b8 	.word	0x200000b8
 80005a8:	40010800 	.word	0x40010800

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a14      	ldr	r2, [pc, #80]	; (8000614 <HAL_MspInit+0x5c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_MspInit+0x5c>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x5c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x5c>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_MspInit+0x60>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <HAL_MspInit+0x60>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800062c:	d113      	bne.n	8000656 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_TIM_Base_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <HAL_TIM_Base_MspInit+0x44>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_TIM_Base_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	201c      	movs	r0, #28
 800064c:	f000 fa69 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000650:	201c      	movs	r0, #28
 8000652:	f000 fa82 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a47      	ldr	r2, [pc, #284]	; (800079c <HAL_UART_MspInit+0x138>)
 8000680:	4293      	cmp	r3, r2
 8000682:	f040 8086 	bne.w	8000792 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <HAL_UART_MspInit+0x13c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a45      	ldr	r2, [pc, #276]	; (80007a0 <HAL_UART_MspInit+0x13c>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <HAL_UART_MspInit+0x13c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <HAL_UART_MspInit+0x13c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a3f      	ldr	r2, [pc, #252]	; (80007a0 <HAL_UART_MspInit+0x13c>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <HAL_UART_MspInit+0x13c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4836      	ldr	r0, [pc, #216]	; (80007a4 <HAL_UART_MspInit+0x140>)
 80006cc:	f000 fc74 	bl	8000fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	482f      	ldr	r0, [pc, #188]	; (80007a4 <HAL_UART_MspInit+0x140>)
 80006e6:	f000 fc67 	bl	8000fb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <HAL_UART_MspInit+0x144>)
 80006ec:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <HAL_UART_MspInit+0x148>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <HAL_UART_MspInit+0x144>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <HAL_UART_MspInit+0x144>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <HAL_UART_MspInit+0x144>)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <HAL_UART_MspInit+0x144>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <HAL_UART_MspInit+0x144>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <HAL_UART_MspInit+0x144>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <HAL_UART_MspInit+0x144>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <HAL_UART_MspInit+0x144>)
 800071c:	f000 fa38 	bl	8000b90 <HAL_DMA_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000726:	f7ff ff41 	bl	80005ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <HAL_UART_MspInit+0x144>)
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <HAL_UART_MspInit+0x144>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 8000738:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <HAL_UART_MspInit+0x150>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 800073e:	2210      	movs	r2, #16
 8000740:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 8000768:	f000 fa12 	bl	8000b90 <HAL_DMA_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000772:	f7ff ff1b 	bl	80005ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 800077a:	639a      	str	r2, [r3, #56]	; 0x38
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <HAL_UART_MspInit+0x14c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2025      	movs	r0, #37	; 0x25
 8000788:	f000 f9cb 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800078c:	2025      	movs	r0, #37	; 0x25
 800078e:	f000 f9e4 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40013800 	.word	0x40013800
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010800 	.word	0x40010800
 80007a8:	20000100 	.word	0x20000100
 80007ac:	40020058 	.word	0x40020058
 80007b0:	20000144 	.word	0x20000144
 80007b4:	40020044 	.word	0x40020044

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fe:	f000 f89d 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <DMA1_Channel4_IRQHandler+0x10>)
 800080e:	f000 facd 	bl	8000dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000144 	.word	0x20000144

0800081c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <DMA1_Channel5_IRQHandler+0x10>)
 8000822:	f000 fac3 	bl	8000dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000100 	.word	0x20000100

08000830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <TIM2_IRQHandler+0x10>)
 8000836:	f001 f9ea 	bl	8001c0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000070 	.word	0x20000070

08000844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <USART1_IRQHandler+0x10>)
 800084a:	f001 fe3d 	bl	80024c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000b8 	.word	0x200000b8

08000858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000864:	f7ff fff8 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800086a:	490c      	ldr	r1, [pc, #48]	; (800089c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000880:	4c09      	ldr	r4, [pc, #36]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088e:	f002 fb9b 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fc63 	bl	800015c <main>
  bx lr
 8000896:	4770      	bx	lr
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80008a0:	0800306c 	.word	0x0800306c
  ldr r2, =_sbss
 80008a4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80008a8:	20000194 	.word	0x20000194

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_Init+0x28>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_Init+0x28>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 f923 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c6:	200f      	movs	r0, #15
 80008c8:	f000 f808 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008cc:	f7ff fe74 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x54>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x58>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f93b 	bl	8000b76 <HAL_SYSTICK_Config>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e00e      	b.n	8000928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d80a      	bhi.n	8000926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	f000 f903 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_InitTick+0x5c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000048 	.word	0x20000048
 8000934:	20000050 	.word	0x20000050
 8000938:	2000004c 	.word	0x2000004c

0800093c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x1c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x20>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a03      	ldr	r2, [pc, #12]	; (800095c <HAL_IncTick+0x20>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000050 	.word	0x20000050
 800095c:	20000190 	.word	0x20000190

08000960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <HAL_GetTick+0x10>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000190 	.word	0x20000190

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4906      	ldr	r1, [pc, #24]	; (8000a0c <__NVIC_EnableIRQ+0x34>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff90 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff2d 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff42 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff35 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e043      	b.n	8000c2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <HAL_DMA_Init+0xa8>)
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_DMA_Init+0xac>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	009a      	lsls	r2, r3, #2
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <HAL_DMA_Init+0xb0>)
 8000bc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000bda:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	bffdfff8 	.word	0xbffdfff8
 8000c3c:	cccccccd 	.word	0xcccccccd
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d008      	beq.n	8000c6e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2204      	movs	r2, #4
 8000c60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e020      	b.n	8000cb0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 020e 	bic.w	r2, r2, #14
 8000c7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0201 	bic.w	r2, r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	2101      	movs	r1, #1
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
	...

08000cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d005      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e051      	b.n	8000d84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 020e 	bic.w	r2, r2, #14
 8000cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <HAL_DMA_Abort_IT+0xd4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d029      	beq.n	8000d5e <HAL_DMA_Abort_IT+0xa2>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <HAL_DMA_Abort_IT+0xd8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d022      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x9e>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_DMA_Abort_IT+0xdc>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d01a      	beq.n	8000d54 <HAL_DMA_Abort_IT+0x98>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <HAL_DMA_Abort_IT+0xe0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d012      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x92>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_DMA_Abort_IT+0xe4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00a      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x8c>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_DMA_Abort_IT+0xe8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d102      	bne.n	8000d42 <HAL_DMA_Abort_IT+0x86>
 8000d3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d40:	e00e      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d46:	e00b      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	e008      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	e005      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	e002      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	e000      	b.n	8000d60 <HAL_DMA_Abort_IT+0xa4>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <HAL_DMA_Abort_IT+0xec>)
 8000d62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	4798      	blx	r3
    } 
  }
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020008 	.word	0x40020008
 8000d94:	4002001c 	.word	0x4002001c
 8000d98:	40020030 	.word	0x40020030
 8000d9c:	40020044 	.word	0x40020044
 8000da0:	40020058 	.word	0x40020058
 8000da4:	4002006c 	.word	0x4002006c
 8000da8:	40020000 	.word	0x40020000

08000dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	2204      	movs	r2, #4
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d04f      	beq.n	8000e74 <HAL_DMA_IRQHandler+0xc8>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d04a      	beq.n	8000e74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d107      	bne.n	8000dfc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0204 	bic.w	r2, r2, #4
 8000dfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a66      	ldr	r2, [pc, #408]	; (8000f9c <HAL_DMA_IRQHandler+0x1f0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d029      	beq.n	8000e5a <HAL_DMA_IRQHandler+0xae>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a65      	ldr	r2, [pc, #404]	; (8000fa0 <HAL_DMA_IRQHandler+0x1f4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d022      	beq.n	8000e56 <HAL_DMA_IRQHandler+0xaa>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a63      	ldr	r2, [pc, #396]	; (8000fa4 <HAL_DMA_IRQHandler+0x1f8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d01a      	beq.n	8000e50 <HAL_DMA_IRQHandler+0xa4>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a62      	ldr	r2, [pc, #392]	; (8000fa8 <HAL_DMA_IRQHandler+0x1fc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d012      	beq.n	8000e4a <HAL_DMA_IRQHandler+0x9e>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a60      	ldr	r2, [pc, #384]	; (8000fac <HAL_DMA_IRQHandler+0x200>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d00a      	beq.n	8000e44 <HAL_DMA_IRQHandler+0x98>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_DMA_IRQHandler+0x204>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d102      	bne.n	8000e3e <HAL_DMA_IRQHandler+0x92>
 8000e38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e3c:	e00e      	b.n	8000e5c <HAL_DMA_IRQHandler+0xb0>
 8000e3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e42:	e00b      	b.n	8000e5c <HAL_DMA_IRQHandler+0xb0>
 8000e44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e48:	e008      	b.n	8000e5c <HAL_DMA_IRQHandler+0xb0>
 8000e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4e:	e005      	b.n	8000e5c <HAL_DMA_IRQHandler+0xb0>
 8000e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e54:	e002      	b.n	8000e5c <HAL_DMA_IRQHandler+0xb0>
 8000e56:	2340      	movs	r3, #64	; 0x40
 8000e58:	e000      	b.n	8000e5c <HAL_DMA_IRQHandler+0xb0>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	4a55      	ldr	r2, [pc, #340]	; (8000fb4 <HAL_DMA_IRQHandler+0x208>)
 8000e5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 8094 	beq.w	8000f92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e72:	e08e      	b.n	8000f92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	2202      	movs	r2, #2
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d056      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x186>
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d051      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020a 	bic.w	r2, r2, #10
 8000eaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <HAL_DMA_IRQHandler+0x1f0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d029      	beq.n	8000f12 <HAL_DMA_IRQHandler+0x166>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <HAL_DMA_IRQHandler+0x1f4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d022      	beq.n	8000f0e <HAL_DMA_IRQHandler+0x162>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a35      	ldr	r2, [pc, #212]	; (8000fa4 <HAL_DMA_IRQHandler+0x1f8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d01a      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x15c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <HAL_DMA_IRQHandler+0x1fc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d012      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x156>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a32      	ldr	r2, [pc, #200]	; (8000fac <HAL_DMA_IRQHandler+0x200>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00a      	beq.n	8000efc <HAL_DMA_IRQHandler+0x150>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <HAL_DMA_IRQHandler+0x204>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d102      	bne.n	8000ef6 <HAL_DMA_IRQHandler+0x14a>
 8000ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ef4:	e00e      	b.n	8000f14 <HAL_DMA_IRQHandler+0x168>
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	e00b      	b.n	8000f14 <HAL_DMA_IRQHandler+0x168>
 8000efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f00:	e008      	b.n	8000f14 <HAL_DMA_IRQHandler+0x168>
 8000f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f06:	e005      	b.n	8000f14 <HAL_DMA_IRQHandler+0x168>
 8000f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0c:	e002      	b.n	8000f14 <HAL_DMA_IRQHandler+0x168>
 8000f0e:	2320      	movs	r3, #32
 8000f10:	e000      	b.n	8000f14 <HAL_DMA_IRQHandler+0x168>
 8000f12:	2302      	movs	r3, #2
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_DMA_IRQHandler+0x208>)
 8000f16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d034      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f30:	e02f      	b.n	8000f92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	2208      	movs	r2, #8
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d028      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x1e8>
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d023      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 020e 	bic.w	r2, r2, #14
 8000f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
    }
  }
  return;
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
}
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020008 	.word	0x40020008
 8000fa0:	4002001c 	.word	0x4002001c
 8000fa4:	40020030 	.word	0x40020030
 8000fa8:	40020044 	.word	0x40020044
 8000fac:	40020058 	.word	0x40020058
 8000fb0:	4002006c 	.word	0x4002006c
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e169      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8158 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a9a      	ldr	r2, [pc, #616]	; (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d05e      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a98      	ldr	r2, [pc, #608]	; (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d875      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a98      	ldr	r2, [pc, #608]	; (800125c <HAL_GPIO_Init+0x2a4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d058      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001000:	4a96      	ldr	r2, [pc, #600]	; (800125c <HAL_GPIO_Init+0x2a4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d86f      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001006:	4a96      	ldr	r2, [pc, #600]	; (8001260 <HAL_GPIO_Init+0x2a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d052      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 800100c:	4a94      	ldr	r2, [pc, #592]	; (8001260 <HAL_GPIO_Init+0x2a8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d869      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001012:	4a94      	ldr	r2, [pc, #592]	; (8001264 <HAL_GPIO_Init+0x2ac>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d04c      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001018:	4a92      	ldr	r2, [pc, #584]	; (8001264 <HAL_GPIO_Init+0x2ac>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d863      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800101e:	4a92      	ldr	r2, [pc, #584]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d046      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001024:	4a90      	ldr	r2, [pc, #576]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d85d      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800102a:	2b12      	cmp	r3, #18
 800102c:	d82a      	bhi.n	8001084 <HAL_GPIO_Init+0xcc>
 800102e:	2b12      	cmp	r3, #18
 8001030:	d859      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001032:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <HAL_GPIO_Init+0x80>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	080010b3 	.word	0x080010b3
 800103c:	0800108d 	.word	0x0800108d
 8001040:	0800109f 	.word	0x0800109f
 8001044:	080010e1 	.word	0x080010e1
 8001048:	080010e7 	.word	0x080010e7
 800104c:	080010e7 	.word	0x080010e7
 8001050:	080010e7 	.word	0x080010e7
 8001054:	080010e7 	.word	0x080010e7
 8001058:	080010e7 	.word	0x080010e7
 800105c:	080010e7 	.word	0x080010e7
 8001060:	080010e7 	.word	0x080010e7
 8001064:	080010e7 	.word	0x080010e7
 8001068:	080010e7 	.word	0x080010e7
 800106c:	080010e7 	.word	0x080010e7
 8001070:	080010e7 	.word	0x080010e7
 8001074:	080010e7 	.word	0x080010e7
 8001078:	080010e7 	.word	0x080010e7
 800107c:	08001095 	.word	0x08001095
 8001080:	080010a9 	.word	0x080010a9
 8001084:	4a79      	ldr	r2, [pc, #484]	; (800126c <HAL_GPIO_Init+0x2b4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800108a:	e02c      	b.n	80010e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e029      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	3304      	adds	r3, #4
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	e024      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	623b      	str	r3, [r7, #32]
          break;
 80010a6:	e01f      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	330c      	adds	r3, #12
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e01a      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ba:	2304      	movs	r3, #4
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e013      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c8:	2308      	movs	r3, #8
 80010ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	611a      	str	r2, [r3, #16]
          break;
 80010d2:	e009      	b.n	80010e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d4:	2308      	movs	r3, #8
 80010d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	615a      	str	r2, [r3, #20]
          break;
 80010de:	e003      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
          break;
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          break;
 80010e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d801      	bhi.n	80010f2 <HAL_GPIO_Init+0x13a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_Init+0x13e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3304      	adds	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d802      	bhi.n	8001104 <HAL_GPIO_Init+0x14c>
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x152>
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	3b08      	subs	r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	210f      	movs	r1, #15
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	6a39      	ldr	r1, [r7, #32]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80b1 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001138:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a4c      	ldr	r2, [pc, #304]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001150:	4a48      	ldr	r2, [pc, #288]	; (8001274 <HAL_GPIO_Init+0x2bc>)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a40      	ldr	r2, [pc, #256]	; (8001278 <HAL_GPIO_Init+0x2c0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3f      	ldr	r2, [pc, #252]	; (800127c <HAL_GPIO_Init+0x2c4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a3e      	ldr	r2, [pc, #248]	; (8001280 <HAL_GPIO_Init+0x2c8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1e4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <HAL_GPIO_Init+0x2cc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1e0>
 8001194:	2303      	movs	r3, #3
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 8001198:	2304      	movs	r3, #4
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a4:	2300      	movs	r3, #0
 80011a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011b6:	492f      	ldr	r1, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x2bc>)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	492c      	ldr	r1, [pc, #176]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4928      	ldr	r1, [pc, #160]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4922      	ldr	r1, [pc, #136]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	60cb      	str	r3, [r1, #12]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	491e      	ldr	r1, [pc, #120]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4918      	ldr	r1, [pc, #96]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4914      	ldr	r1, [pc, #80]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d021      	beq.n	800128c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e021      	b.n	800129a <HAL_GPIO_Init+0x2e2>
 8001256:	bf00      	nop
 8001258:	10320000 	.word	0x10320000
 800125c:	10310000 	.word	0x10310000
 8001260:	10220000 	.word	0x10220000
 8001264:	10210000 	.word	0x10210000
 8001268:	10120000 	.word	0x10120000
 800126c:	10110000 	.word	0x10110000
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40011000 	.word	0x40011000
 8001284:	40011400 	.word	0x40011400
 8001288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_GPIO_Init+0x304>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	43db      	mvns	r3, r3
 8001294:	4909      	ldr	r1, [pc, #36]	; (80012bc <HAL_GPIO_Init+0x304>)
 8001296:	4013      	ands	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	3301      	adds	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f ae8e 	bne.w	8000fcc <HAL_GPIO_Init+0x14>
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	372c      	adds	r7, #44	; 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e001      	b.n	80012e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]
 80012fa:	4613      	mov	r3, r2
 80012fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fe:	787b      	ldrb	r3, [r7, #1]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800130a:	e003      	b.n	8001314 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	041a      	lsls	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	611a      	str	r2, [r3, #16]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001330:	887a      	ldrh	r2, [r7, #2]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	041a      	lsls	r2, r3, #16
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43d9      	mvns	r1, r3
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	400b      	ands	r3, r1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e272      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8087 	beq.w	800147e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001370:	4b92      	ldr	r3, [pc, #584]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b04      	cmp	r3, #4
 800137a:	d00c      	beq.n	8001396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800137c:	4b8f      	ldr	r3, [pc, #572]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d112      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
 8001388:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d10b      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4b89      	ldr	r3, [pc, #548]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d06c      	beq.n	800147c <HAL_RCC_OscConfig+0x12c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d168      	bne.n	800147c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e24c      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x76>
 80013b8:	4b80      	ldr	r3, [pc, #512]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a7f      	ldr	r2, [pc, #508]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e02e      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b7b      	ldr	r3, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a7a      	ldr	r2, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b78      	ldr	r3, [pc, #480]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a77      	ldr	r2, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0xbc>
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 800140c:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a67      	ldr	r2, [pc, #412]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fa98 	bl	8000960 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fa94 	bl	8000960 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e200      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xe4>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fa84 	bl	8000960 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fa80 	bl	8000960 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1ec      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x10c>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1c0      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4939      	ldr	r1, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x270>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fa39 	bl	8000960 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fa35 	bl	8000960 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1a1      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_RCC_OscConfig+0x270>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fa18 	bl	8000960 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fa14 	bl	8000960 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e180      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03a      	beq.n	80015d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d019      	beq.n	800159a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_RCC_OscConfig+0x274>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156c:	f7ff f9f8 	bl	8000960 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff f9f4 	bl	8000960 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e160      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f000 face 	bl	8001b34 <RCC_Delay>
 8001598:	e01c      	b.n	80015d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_RCC_OscConfig+0x274>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff f9de 	bl	8000960 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a6:	e00f      	b.n	80015c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff f9da 	bl	8000960 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d908      	bls.n	80015c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e146      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	42420000 	.word	0x42420000
 80015c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b92      	ldr	r3, [pc, #584]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e9      	bne.n	80015a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a6 	beq.w	800172e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a87      	ldr	r2, [pc, #540]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b85      	ldr	r3, [pc, #532]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <HAL_RCC_OscConfig+0x4c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161a:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <HAL_RCC_OscConfig+0x4c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7e      	ldr	r2, [pc, #504]	; (8001818 <HAL_RCC_OscConfig+0x4c8>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001626:	f7ff f99b 	bl	8000960 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7ff f997 	bl	8000960 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e103      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b75      	ldr	r3, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x4c8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x312>
 8001654:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a6e      	ldr	r2, [pc, #440]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e02d      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x334>
 800166a:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a69      	ldr	r2, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	e01c      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x356>
 800168c:	4b61      	ldr	r3, [pc, #388]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a60      	ldr	r2, [pc, #384]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	4b5e      	ldr	r3, [pc, #376]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 80016a6:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a5a      	ldr	r2, [pc, #360]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b58      	ldr	r3, [pc, #352]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a57      	ldr	r2, [pc, #348]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d015      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff f94b 	bl	8000960 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f947 	bl	8000960 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e0b1      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	4b4b      	ldr	r3, [pc, #300]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ee      	beq.n	80016ce <HAL_RCC_OscConfig+0x37e>
 80016f0:	e014      	b.n	800171c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff f935 	bl	8000960 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff f931 	bl	8000960 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e09b      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	4b40      	ldr	r3, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ee      	bne.n	80016fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d105      	bne.n	800172e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8087 	beq.w	8001846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d061      	beq.n	8001808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d146      	bne.n	80017da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff f905 	bl	8000960 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff f901 	bl	8000960 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e06d      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d108      	bne.n	8001794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4921      	ldr	r1, [pc, #132]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a19      	ldr	r1, [r3, #32]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	430b      	orrs	r3, r1
 80017a6:	491b      	ldr	r1, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff f8d5 	bl	8000960 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f8d1 	bl	8000960 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e03d      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x46a>
 80017d8:	e035      	b.n	8001846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff f8be 	bl	8000960 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f8ba 	bl	8000960 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e026      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x498>
 8001806:	e01e      	b.n	8001846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e019      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x500>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	429a      	cmp	r2, r3
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4965      	ldr	r1, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e073      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4936      	ldr	r1, [pc, #216]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff f80c 	bl	8000960 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f808 	bl	8000960 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e053      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d210      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4922      	ldr	r1, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1cc>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe ff6a 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08003038 	.word	0x08003038
 8001a20:	20000048 	.word	0x20000048
 8001a24:	2000004c 	.word	0x2000004c

08001a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x30>
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_GetSysClockFreq+0x36>
 8001a56:	e027      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a5a:	613b      	str	r3, [r7, #16]
      break;
 8001a5c:	e027      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	0c9b      	lsrs	r3, r3, #18
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d010      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	0c5b      	lsrs	r3, r3, #17
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8a:	fb03 f202 	mul.w	r2, r3, r2
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e004      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	613b      	str	r3, [r7, #16]
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aaa:	613b      	str	r3, [r7, #16]
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	693b      	ldr	r3, [r7, #16]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	007a1200 	.word	0x007a1200
 8001ac4:	08003050 	.word	0x08003050
 8001ac8:	08003060 	.word	0x08003060
 8001acc:	003d0900 	.word	0x003d0900

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000048 	.word	0x20000048

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff2 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08003048 	.word	0x08003048

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0adb      	lsrs	r3, r3, #11
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08003048 	.word	0x08003048

08001b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <RCC_Delay+0x34>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <RCC_Delay+0x38>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0a5b      	lsrs	r3, r3, #9
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b50:	bf00      	nop
  }
  while (Delay --);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <RCC_Delay+0x1c>
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000048 	.word	0x20000048
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e041      	b.n	8001c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fd40 	bl	800061c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f000 fa2a 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d122      	bne.n	8001c6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d11b      	bne.n	8001c6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0202 	mvn.w	r2, #2
 8001c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9bd 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001c56:	e005      	b.n	8001c64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f9b0 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f9bf 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d122      	bne.n	8001cbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d11b      	bne.n	8001cbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f06f 0204 	mvn.w	r2, #4
 8001c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f993 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001caa:	e005      	b.n	8001cb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f986 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f995 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d122      	bne.n	8001d12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d11b      	bne.n	8001d12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f06f 0208 	mvn.w	r2, #8
 8001ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f969 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001cfe:	e005      	b.n	8001d0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f95c 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f96b 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d122      	bne.n	8001d66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d11b      	bne.n	8001d66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0210 	mvn.w	r2, #16
 8001d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f93f 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001d52:	e005      	b.n	8001d60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f932 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f941 	bl	8001fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d10e      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 0201 	mvn.w	r2, #1
 8001d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f90d 	bl	8001fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d10e      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	d107      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fa84 	bl	80022c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d10e      	bne.n	8001dea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d107      	bne.n	8001dea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f905 	bl	8001ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d10e      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0220 	mvn.w	r2, #32
 8001e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa4f 	bl	80022b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_ConfigClockSource+0x1c>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e0b4      	b.n	8001fa4 <HAL_TIM_ConfigClockSource+0x186>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e72:	d03e      	beq.n	8001ef2 <HAL_TIM_ConfigClockSource+0xd4>
 8001e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e78:	f200 8087 	bhi.w	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e80:	f000 8086 	beq.w	8001f90 <HAL_TIM_ConfigClockSource+0x172>
 8001e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e88:	d87f      	bhi.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001e8a:	2b70      	cmp	r3, #112	; 0x70
 8001e8c:	d01a      	beq.n	8001ec4 <HAL_TIM_ConfigClockSource+0xa6>
 8001e8e:	2b70      	cmp	r3, #112	; 0x70
 8001e90:	d87b      	bhi.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001e92:	2b60      	cmp	r3, #96	; 0x60
 8001e94:	d050      	beq.n	8001f38 <HAL_TIM_ConfigClockSource+0x11a>
 8001e96:	2b60      	cmp	r3, #96	; 0x60
 8001e98:	d877      	bhi.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001e9a:	2b50      	cmp	r3, #80	; 0x50
 8001e9c:	d03c      	beq.n	8001f18 <HAL_TIM_ConfigClockSource+0xfa>
 8001e9e:	2b50      	cmp	r3, #80	; 0x50
 8001ea0:	d873      	bhi.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d058      	beq.n	8001f58 <HAL_TIM_ConfigClockSource+0x13a>
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d86f      	bhi.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001eaa:	2b30      	cmp	r3, #48	; 0x30
 8001eac:	d064      	beq.n	8001f78 <HAL_TIM_ConfigClockSource+0x15a>
 8001eae:	2b30      	cmp	r3, #48	; 0x30
 8001eb0:	d86b      	bhi.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d060      	beq.n	8001f78 <HAL_TIM_ConfigClockSource+0x15a>
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d867      	bhi.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d05c      	beq.n	8001f78 <HAL_TIM_ConfigClockSource+0x15a>
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d05a      	beq.n	8001f78 <HAL_TIM_ConfigClockSource+0x15a>
 8001ec2:	e062      	b.n	8001f8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f000 f971 	bl	80021ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ee6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	609a      	str	r2, [r3, #8]
      break;
 8001ef0:	e04f      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6899      	ldr	r1, [r3, #8]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f000 f95a 	bl	80021ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f14:	609a      	str	r2, [r3, #8]
      break;
 8001f16:	e03c      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	461a      	mov	r2, r3
 8001f26:	f000 f8d1 	bl	80020cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2150      	movs	r1, #80	; 0x50
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f928 	bl	8002186 <TIM_ITRx_SetConfig>
      break;
 8001f36:	e02c      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	461a      	mov	r2, r3
 8001f46:	f000 f8ef 	bl	8002128 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2160      	movs	r1, #96	; 0x60
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f918 	bl	8002186 <TIM_ITRx_SetConfig>
      break;
 8001f56:	e01c      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f000 f8b1 	bl	80020cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2140      	movs	r1, #64	; 0x40
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f908 	bl	8002186 <TIM_ITRx_SetConfig>
      break;
 8001f76:	e00c      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f000 f8ff 	bl	8002186 <TIM_ITRx_SetConfig>
      break;
 8001f88:	e003      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8e:	e000      	b.n	8001f92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
	...

08002008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a29      	ldr	r2, [pc, #164]	; (80020c0 <TIM_Base_SetConfig+0xb8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00b      	beq.n	8002038 <TIM_Base_SetConfig+0x30>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d007      	beq.n	8002038 <TIM_Base_SetConfig+0x30>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <TIM_Base_SetConfig+0xbc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_Base_SetConfig+0x30>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <TIM_Base_SetConfig+0xc0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d108      	bne.n	800204a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <TIM_Base_SetConfig+0xb8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0x62>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0x62>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <TIM_Base_SetConfig+0xbc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0x62>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <TIM_Base_SetConfig+0xc0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <TIM_Base_SetConfig+0xb8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d103      	bne.n	80020b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800

080020cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	f023 0201 	bic.w	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f023 030a 	bic.w	r3, r3, #10
 8002108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	621a      	str	r2, [r3, #32]
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0210 	bic.w	r2, r3, #16
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	031b      	lsls	r3, r3, #12
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002164:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	621a      	str	r2, [r3, #32]
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f043 0307 	orr.w	r3, r3, #7
 80021a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	609a      	str	r2, [r3, #8]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	021a      	lsls	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	431a      	orrs	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	609a      	str	r2, [r3, #8]
}
 80021ee:	bf00      	nop
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800220c:	2302      	movs	r3, #2
 800220e:	e046      	b.n	800229e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225c:	d009      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10c      	bne.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4313      	orrs	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	40012c00 	.word	0x40012c00
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800

080022b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e042      	b.n	8002370 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe f9b0 	bl	8000664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fdc5 	bl	8002eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b20      	cmp	r3, #32
 8002396:	d16d      	bne.n	8002474 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_UART_Transmit+0x2c>
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e066      	b.n	8002476 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2221      	movs	r2, #33	; 0x21
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b6:	f7fe fad3 	bl	8000960 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	88fa      	ldrh	r2, [r7, #6]
 80023c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d0:	d108      	bne.n	80023e4 <HAL_UART_Transmit+0x6c>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e003      	b.n	80023ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023ec:	e02a      	b.n	8002444 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fb14 	bl	8002a26 <UART_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e036      	b.n	8002476 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10b      	bne.n	8002426 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800241c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	3302      	adds	r3, #2
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	e007      	b.n	8002436 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	3301      	adds	r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1cf      	bne.n	80023ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fae4 	bl	8002a26 <UART_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e006      	b.n	8002476 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	4613      	mov	r3, r2
 800248a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b20      	cmp	r3, #32
 8002496:	d112      	bne.n	80024be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_UART_Receive_IT+0x26>
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e00b      	b.n	80024c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fb24 	bl	8002b02 <UART_Start_Receive_IT>
 80024ba:	4603      	mov	r3, r0
 80024bc:	e000      	b.n	80024c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0ba      	sub	sp, #232	; 0xe8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_UART_IRQHandler+0x66>
 800251a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fc01 	bl	8002d2e <UART_Receive_IT>
      return;
 800252c:	e25b      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800252e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80de 	beq.w	80026f4 <HAL_UART_IRQHandler+0x22c>
 8002538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80d1 	beq.w	80026f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_UART_IRQHandler+0xae>
 800255e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_UART_IRQHandler+0xd2>
 8002582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_UART_IRQHandler+0xf6>
 80025a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d011      	beq.n	80025ee <HAL_UART_IRQHandler+0x126>
 80025ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0208 	orr.w	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 81f2 	beq.w	80029dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_UART_IRQHandler+0x14e>
 8002604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb8c 	bl	8002d2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <HAL_UART_IRQHandler+0x17a>
 800263a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d04f      	beq.n	80026e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa96 	bl	8002b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d041      	beq.n	80026da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3314      	adds	r3, #20
 800265c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800266c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3314      	adds	r3, #20
 800267e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800268e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800269a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1d9      	bne.n	8002656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d013      	beq.n	80026d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	4a7e      	ldr	r2, [pc, #504]	; (80028a8 <HAL_UART_IRQHandler+0x3e0>)
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fb00 	bl	8000cbc <HAL_DMA_Abort_IT>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026cc:	4610      	mov	r0, r2
 80026ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	e00e      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f993 	bl	80029fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e00a      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f98f 	bl	80029fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e006      	b.n	80026f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f98b 	bl	80029fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026ee:	e175      	b.n	80029dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	bf00      	nop
    return;
 80026f2:	e173      	b.n	80029dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 814f 	bne.w	800299c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8148 	beq.w	800299c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8141 	beq.w	800299c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80b6 	beq.w	80028ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800274c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8145 	beq.w	80029e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800275a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800275e:	429a      	cmp	r2, r3
 8002760:	f080 813e 	bcs.w	80029e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b20      	cmp	r3, #32
 8002774:	f000 8088 	beq.w	8002888 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800278e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027b4:	e841 2300 	strex	r3, r2, [r1]
 80027b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1d9      	bne.n	8002778 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027f4:	e841 2300 	strex	r3, r2, [r1]
 80027f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e1      	bne.n	80027c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280a:	e853 3f00 	ldrex	r3, [r3]
 800280e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3314      	adds	r3, #20
 8002820:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002824:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002826:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800282a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800282c:	e841 2300 	strex	r3, r2, [r1]
 8002830:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e3      	bne.n	8002800 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	f023 0310 	bic.w	r3, r3, #16
 800285c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800286a:	65ba      	str	r2, [r7, #88]	; 0x58
 800286c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e3      	bne.n	8002846 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe f9de 	bl	8000c44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002896:	b29b      	uxth	r3, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8b6 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a4:	e09c      	b.n	80029e0 <HAL_UART_IRQHandler+0x518>
 80028a6:	bf00      	nop
 80028a8:	08002c39 	.word	0x08002c39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 808e 	beq.w	80029e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8089 	beq.w	80029e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f6:	647a      	str	r2, [r7, #68]	; 0x44
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e3      	bne.n	80028d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	623b      	str	r3, [r7, #32]
   return(result);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800292e:	633a      	str	r2, [r7, #48]	; 0x30
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e3      	bne.n	800290a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0310 	bic.w	r3, r3, #16
 8002966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002974:	61fa      	str	r2, [r7, #28]
 8002976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	69b9      	ldr	r1, [r7, #24]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	617b      	str	r3, [r7, #20]
   return(result);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e3      	bne.n	8002950 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f83b 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800299a:	e023      	b.n	80029e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800299c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <HAL_UART_IRQHandler+0x4f4>
 80029a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f953 	bl	8002c60 <UART_Transmit_IT>
    return;
 80029ba:	e014      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <HAL_UART_IRQHandler+0x51e>
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f992 	bl	8002cfe <UART_EndTransmit_IT>
    return;
 80029da:	e004      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029e4:	bf00      	nop
  }
}
 80029e6:	37e8      	adds	r7, #232	; 0xe8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b090      	sub	sp, #64	; 0x40
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a36:	e050      	b.n	8002ada <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d04c      	beq.n	8002ada <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a46:	f7fd ff8b 	bl	8000960 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d241      	bcs.n	8002ada <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a76:	637a      	str	r2, [r7, #52]	; 0x34
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e5      	bne.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3314      	adds	r3, #20
 8002a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aaa:	623a      	str	r2, [r7, #32]
 8002aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	69f9      	ldr	r1, [r7, #28]
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e5      	bne.n	8002a8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e00f      	b.n	8002afa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d09f      	beq.n	8002a38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3740      	adds	r7, #64	; 0x40
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2222      	movs	r2, #34	; 0x22
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0220 	orr.w	r2, r2, #32
 8002b66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b095      	sub	sp, #84	; 0x54
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b9c:	643a      	str	r2, [r7, #64]	; 0x40
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3314      	adds	r3, #20
 8002bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3314      	adds	r3, #20
 8002bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd8:	e841 2300 	strex	r3, r2, [r1]
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e5      	bne.n	8002bb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d119      	bne.n	8002c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	e853 3f00 	ldrex	r3, [r3]
 8002bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f023 0310 	bic.w	r3, r3, #16
 8002c02:	647b      	str	r3, [r7, #68]	; 0x44
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c0c:	61ba      	str	r2, [r7, #24]
 8002c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	613b      	str	r3, [r7, #16]
   return(result);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e5      	bne.n	8002bec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c2e:	bf00      	nop
 8002c30:	3754      	adds	r7, #84	; 0x54
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fed3 	bl	80029fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b21      	cmp	r3, #33	; 0x21
 8002c72:	d13e      	bne.n	8002cf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7c:	d114      	bne.n	8002ca8 <UART_Transmit_IT+0x48>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d110      	bne.n	8002ca8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]
 8002ca6:	e008      	b.n	8002cba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	1c59      	adds	r1, r3, #1
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6211      	str	r1, [r2, #32]
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10f      	bne.n	8002cee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fe64 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b08c      	sub	sp, #48	; 0x30
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b22      	cmp	r3, #34	; 0x22
 8002d40:	f040 80ae 	bne.w	8002ea0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d117      	bne.n	8002d7e <UART_Receive_IT+0x50>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d113      	bne.n	8002d7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d7c:	e026      	b.n	8002dcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d90:	d007      	beq.n	8002da2 <UART_Receive_IT+0x74>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <UART_Receive_IT+0x82>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e008      	b.n	8002dc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d15d      	bne.n	8002e9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0220 	bic.w	r2, r2, #32
 8002dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d135      	bne.n	8002e92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f023 0310 	bic.w	r3, r3, #16
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	623a      	str	r2, [r7, #32]
 8002e4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	69f9      	ldr	r1, [r7, #28]
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e5      	bne.n	8002e2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d10a      	bne.n	8002e84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fdc0 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
 8002e90:	e002      	b.n	8002e98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fb50 	bl	8000538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e002      	b.n	8002ea2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3730      	adds	r7, #48	; 0x30
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ee6:	f023 030c 	bic.w	r3, r3, #12
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <UART_SetConfig+0x114>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d103      	bne.n	8002f1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f14:	f7fe fdfa 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	e002      	b.n	8002f22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7fe fde2 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002f20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	009a      	lsls	r2, r3, #2
 8002f2c:	441a      	add	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <UART_SetConfig+0x118>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	0119      	lsls	r1, r3, #4
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <UART_SetConfig+0x118>)
 8002f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2064      	movs	r0, #100	; 0x64
 8002f62:	fb00 f303 	mul.w	r3, r0, r3
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	3332      	adds	r3, #50	; 0x32
 8002f6c:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <UART_SetConfig+0x118>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	4419      	add	r1, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009a      	lsls	r2, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <UART_SetConfig+0x118>)
 8002f92:	fba3 0302 	umull	r0, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2064      	movs	r0, #100	; 0x64
 8002f9a:	fb00 f303 	mul.w	r3, r0, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	3332      	adds	r3, #50	; 0x32
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <UART_SetConfig+0x118>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	440a      	add	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	51eb851f 	.word	0x51eb851f

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	2600      	movs	r6, #0
 8002fcc:	4d0c      	ldr	r5, [pc, #48]	; (8003000 <__libc_init_array+0x38>)
 8002fce:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	42a6      	cmp	r6, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	f000 f822 	bl	8003020 <_init>
 8002fdc:	2600      	movs	r6, #0
 8002fde:	4d0a      	ldr	r5, [pc, #40]	; (8003008 <__libc_init_array+0x40>)
 8002fe0:	4c0a      	ldr	r4, [pc, #40]	; (800300c <__libc_init_array+0x44>)
 8002fe2:	1b64      	subs	r4, r4, r5
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	42a6      	cmp	r6, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff0:	4798      	blx	r3
 8002ff2:	3601      	adds	r6, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffa:	4798      	blx	r3
 8002ffc:	3601      	adds	r6, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08003064 	.word	0x08003064
 8003004:	08003064 	.word	0x08003064
 8003008:	08003064 	.word	0x08003064
 800300c:	08003068 	.word	0x08003068

08003010 <memset>:
 8003010:	4603      	mov	r3, r0
 8003012:	4402      	add	r2, r0
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <_init>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr

0800302c <_fini>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr
